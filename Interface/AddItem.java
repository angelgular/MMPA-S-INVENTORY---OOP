package Interface;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

/**
 *
 * @author Angel
 */
public class AddItem extends javax.swing.JInternalFrame {

    PreparedStatement pst = null;
    ResultSet rs = null;
    String iid;
    String iname;
    String category;
    String serialno;
    String costprice;
    String sellprice;
    String quantity;
    String minimum;
    String maximum;
    Connection con;

    private ImageIcon format = null;
    String fname = null;
    int s = 0;
    byte[] pimage = null;

    /**
     * Creates new form AddItem
     */
    public AddItem() {
        initComponents();
        con = DBConnection.connect();
        autoid();
        tablelord();

        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        BasicInternalFrameUI bi = (BasicInternalFrameUI) this.getUI();
        bi.setNorthPane(null);
    }

    public ImageIcon resizeImage(String imagePath, byte[] pic) {
        ImageIcon image = null;
        if (imagePath != null) {
            image = new ImageIcon(imagePath);
        } else {
            image = new ImageIcon(pic);
        }
        Image img = image.getImage();
        Image img1 = img.getScaledInstance(lblimage.getHeight(), lblimage.getWidth(), Image.SCALE_SMOOTH);
        ImageIcon img2 = new ImageIcon(img1);
        return img2;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cmbcategory = new javax.swing.JComboBox<>();
        txtid = new javax.swing.JTextField();
        txtname = new javax.swing.JTextField();
        txtserial = new javax.swing.JTextField();
        txtcost = new javax.swing.JTextField();
        txtselling = new javax.swing.JTextField();
        txtquantity = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnupdate = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        btnclear = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtmin = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtmax = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbladditem = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        browse = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        lblimage = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));
        jPanel1.setPreferredSize(new java.awt.Dimension(1070, 740));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(244, 244, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 51));
        jLabel2.setText("Item ID");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 51));
        jLabel3.setText("Item Name");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 51));
        jLabel4.setText("Category");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 51));
        jLabel5.setText("Serial No.");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 51));
        jLabel6.setText("Cost Price");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 51));
        jLabel7.setText("Selling Price");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 51));
        jLabel8.setText("Quantity");

        cmbcategory.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        cmbcategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Category", "Parts", "Accessories" }));

        txtid.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtidActionPerformed(evt);
            }
        });

        txtname.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        txtserial.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        txtcost.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        txtselling.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        txtquantity.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        btnAdd.setBackground(new java.awt.Color(0, 0, 102));
        btnAdd.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("ADD");
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddMouseClicked(evt);
            }
        });

        btnupdate.setBackground(new java.awt.Color(0, 102, 0));
        btnupdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnupdate.setForeground(new java.awt.Color(255, 255, 255));
        btnupdate.setText("UPDATE");
        btnupdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnupdateMouseClicked(evt);
            }
        });
        btnupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdateActionPerformed(evt);
            }
        });

        btndelete.setBackground(new java.awt.Color(255, 0, 0));
        btndelete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btndelete.setForeground(new java.awt.Color(255, 255, 255));
        btndelete.setText("DELETE");
        btndelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btndeleteMouseClicked(evt);
            }
        });

        btnclear.setBackground(new java.awt.Color(153, 0, 0));
        btnclear.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnclear.setForeground(new java.awt.Color(255, 255, 255));
        btnclear.setText("CLEAR");
        btnclear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnclearMouseClicked(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 51));
        jLabel13.setText("MIN");

        txtmin.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 51));
        jLabel14.setText("MAX");

        txtmax.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addGap(71, 71, 71)
                                    .addComponent(txtmin, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(34, 34, 34)
                                    .addComponent(btnupdate)))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(35, 35, 35)
                                    .addComponent(btndelete)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnclear))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel14)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtmax, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel3))
                                    .addGap(38, 38, 38))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(46, 46, 46))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel13)
                                        .addComponent(jLabel8))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtname)
                                .addComponent(txtquantity, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtselling)
                                .addComponent(txtcost)
                                .addComponent(txtserial)
                                .addComponent(cmbcategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtid)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtname)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbcategory)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtserial)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtcost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtselling)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtquantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtmax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btndelete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnclear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, 470, 420));

        tbladditem.setBackground(new java.awt.Color(244, 244, 255));
        tbladditem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbladditem.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tbladditem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbladditemMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbladditem);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 70, 520, 630));

        jPanel4.setBackground(new java.awt.Color(244, 244, 255));

        browse.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204), new java.awt.Color(51, 51, 51), new java.awt.Color(102, 102, 102)));
        browse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                browseMouseClicked(evt);
            }
        });

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/browse.png"))); // NOI18N
        jLabel12.setText("BROWSE");

        javax.swing.GroupLayout browseLayout = new javax.swing.GroupLayout(browse);
        browse.setLayout(browseLayout);
        browseLayout.setHorizontalGroup(
            browseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browseLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel12)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        browseLayout.setVerticalGroup(
            browseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, browseLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addContainerGap())
        );

        lblimage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblimage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 51), 2));
        lblimage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(browse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(lblimage, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(lblimage, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(browse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 470, 190));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("ADD ITEM");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1056, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtidActionPerformed

    private void btnupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnupdateActionPerformed

    private void browseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browseMouseClicked

        JFileChooser fchoser = new JFileChooser();
        fchoser.showOpenDialog(null);
        File f = fchoser.getSelectedFile();
        fname = f.getAbsolutePath();
        ImageIcon imgcon = new ImageIcon(fname);
        try {
            File image = new File(fname);
            FileInputStream fis = new FileInputStream(image);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (int readnum; (readnum = fis.read(buf)) != -1;) {
                baos.write(buf, 0, readnum);
            }
            pimage = baos.toByteArray();
            lblimage.setIcon(resizeImage(fname, buf));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_browseMouseClicked

    private void btnAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseClicked

        getdata();
        // Validate inputs
        if (!validateInputs()) return;
        if (!isDuplicateItem()) return;
        try {
            int quantityValue = Integer.parseInt(quantity);
            int minStock = Integer.parseInt(minimum);
            int maxStock = Integer.parseInt(maximum);

            // Validation conditions
            if (quantityValue <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity must be 1 and above the minimum stock.");
                return;
            }
            if (quantityValue > 1000) {
                JOptionPane.showMessageDialog(this, "Quantity must be lower than or equal to 1000 to the maximum stock.");
                return;
            }
            if (minStock <= 0) {
                JOptionPane.showMessageDialog(this, "Minimum must be greater than 0.");
                return;
            }
            if (minStock > quantityValue) {
                JOptionPane.showMessageDialog(this, "Minimum must be less than or equal to quantity.");
                return;
            }
            if (maxStock >= 1000) {
                JOptionPane.showMessageDialog(this, "Maximum must be less than 1000.");
                return;
            }
            if (maxStock < quantityValue) {
                JOptionPane.showMessageDialog(this, "Quantity must be less than or equal to maximum.");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Quantity, Minimum, and Maximum stock must be numeric.");
            return;
        }

        // Perform the insert operation
        try {
            String q = "INSERT INTO `productlist`(`item_id`, `item_name`, `category`, `serial_no`, `cost_price`, `sale_price`, `quantity`, `min_stock`, `max_stock`, `image`) VALUES (?,?,?,?,?,?,?,?,?,?)";
            pst = con.prepareStatement(q);
            pst.setString(1, iid);
            pst.setString(2, iname);
            pst.setString(3, category);
            pst.setString(4, serialno);
            pst.setString(5, costprice);
            pst.setString(6, sellprice);
            pst.setString(7, quantity);
            pst.setString(8, minimum);
            pst.setString(9, maximum);
            pst.setBytes(10, pimage);
            pst.execute();

            cleardata();
            tablelord();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_btnAddMouseClicked

    private void btnupdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnupdateMouseClicked

        getdata();

        // Validate inputs
        if (!validateInputs()) return;
        if (!isDuplicateItem()) return;
        
        try {
            int quantityValue = Integer.parseInt(quantity);
            int minStock = Integer.parseInt(minimum);
            int maxStock = Integer.parseInt(maximum);

            // Validation conditions
            if (quantityValue <= 0) {
                JOptionPane.showMessageDialog(this, "Quantity must be 1 and above the minimum stock.");
                return;
            }
            if (quantityValue > 1000) {
                JOptionPane.showMessageDialog(this, "Quantity must be lower than or equal to 1000 to the maximum stock.");
                return;
            }
            if (minStock <= 0) {
                JOptionPane.showMessageDialog(this, "Minimum must be greater than 0.");
                return;
            }
            if (minStock > quantityValue) {
                JOptionPane.showMessageDialog(this, "Minimum must be less than or equal to quantity.");
                return;
            }
            if (maxStock >= 1000) {
                JOptionPane.showMessageDialog(this, "Maximum must be less than 1000.");
                return;
            }
            if (maxStock < quantityValue) {
                JOptionPane.showMessageDialog(this, "Quantity must be less than or equal to maximum.");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Quantity, Minimum, and Maximum stock must be numeric.");
            return;
        }

        // Perform the update operation
        try {
            String squpdate = "UPDATE `productlist` SET `item_name`=?, `category`=?, `serial_no`=?, `cost_price`=?, `sale_price`=?, `quantity`=?, `min_stock`=?, `max_stock`=?, `image`=? WHERE item_id='" + iid + "'";
            pst = con.prepareStatement(squpdate);
            pst.setString(1, iname);
            pst.setString(2, category);
            pst.setString(3, serialno);
            pst.setString(4, costprice);
            pst.setString(5, sellprice);
            pst.setString(6, quantity);
            pst.setString(7, minimum);
            pst.setString(8, maximum);
            pst.setBytes(9, pimage);
            pst.execute();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }

        cleardata();
        tablelord();
    }//GEN-LAST:event_btnupdateMouseClicked

    private void btnclearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnclearMouseClicked
        cleardata();
    }//GEN-LAST:event_btnclearMouseClicked

    private void btndeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btndeleteMouseClicked
        try {
            String sql = "DELETE FROM `productlist` WHERE item_id='" + txtid.getText() + "'";
            pst = con.prepareStatement(sql);
            pst.execute();
            tablelord();

        } catch (Exception e) {

        }

    }//GEN-LAST:event_btndeleteMouseClicked

    private void tbladditemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbladditemMouseClicked
        String id;
        DefaultTableModel tmodel = (DefaultTableModel) tbladditem.getModel();
        int selectrowindex = tbladditem.getSelectedRow();
        id = (tmodel.getValueAt(selectrowindex, 0).toString());
        try {
            String sql = "SELECT `item_id`, `item_name`, `category`, `serial_no`, `cost_price`, `sale_price`, `quantity`, `min_stock`, `max_stock`, `image` FROM `productlist` WHERE item_id='" + id + "'";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                txtid.setText(rs.getString("item_id"));
                txtname.setText(rs.getString("item_name"));
                cmbcategory.setSelectedItem(rs.getString("category"));
                txtserial.setText(rs.getString("serial_no"));
                txtcost.setText(rs.getString("cost_price"));
                txtselling.setText(rs.getString("sale_price"));
                txtquantity.setText(rs.getString("quantity"));
                txtmin.setText(rs.getString("min_stock"));
                txtmax.setText(rs.getString("max_stock"));

                byte[] imagedata = rs.getBytes("image");
                format = new ImageIcon(imagedata);
                Image mm = format.getImage();
                Image img2 = mm.getScaledInstance(lblimage.getWidth(), lblimage.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon image = new ImageIcon(img2);
                lblimage.setIcon(image);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }//GEN-LAST:event_tbladditemMouseClicked

    private void theader() {
        JTableHeader thead = tbladditem.getTableHeader();
        thead.setForeground(Color.decode("#102C57"));
        thead.setBackground(Color.decode("#ECEBDE"));
        thead.setFont(new Font("Tahome", Font.BOLD, 12));

        TableColumn col = tbladditem.getColumnModel().getColumn(0);
        col.setPreferredWidth(70);
        TableColumn col1 = tbladditem.getColumnModel().getColumn(1);
        col1.setPreferredWidth(120);
        TableColumn col2 = tbladditem.getColumnModel().getColumn(2);
        col2.setPreferredWidth(70);
        TableColumn col3 = tbladditem.getColumnModel().getColumn(3);
        col3.setPreferredWidth(70);
        TableColumn col4 = tbladditem.getColumnModel().getColumn(4);
        col4.setPreferredWidth(70);
        TableColumn col5 = tbladditem.getColumnModel().getColumn(5);
        col5.setPreferredWidth(70);
        TableColumn col6 = tbladditem.getColumnModel().getColumn(6);
        col6.setPreferredWidth(70);
        TableColumn col7 = tbladditem.getColumnModel().getColumn(7);
        col7.setPreferredWidth(70);
        TableColumn col8 = tbladditem.getColumnModel().getColumn(8);
        col8.setPreferredWidth(70);
        TableColumn col9 = tbladditem.getColumnModel().getColumn(9);
        col9.setPreferredWidth(70);

    }

    private boolean isDuplicateItem() {
        try {
            String sql = "SELECT * FROM `productlist` WHERE `item_name` = ? OR `serial_no` = ?";
            pst = con.prepareStatement(sql);
            pst.setString(1, iname);      // Check by item name
            pst.setString(2, serialno);  // Check by serial number
            rs = pst.executeQuery();

            if (rs.next()) {
                // If a record is found, it means the item already exists
                return true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error checking for duplicate item: " + e.getMessage());
        }
        return false; // No duplicate found
    }

    private boolean validateInputs() {
        if (txtname.getText().isEmpty() || txtserial.getText().isEmpty() || txtcost.getText().isEmpty()
                || txtselling.getText().isEmpty() || txtquantity.getText().isEmpty()
                || txtmin.getText().isEmpty() || txtmax.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are mandatory.");
            return false;
        }

        try {
            Integer.parseInt(txtmin.getText());
            Integer.parseInt(txtmax.getText());
            Integer.parseInt(txtquantity.getText()); // Validate quantity as well
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Quantity, Minimum and Maximum stock must be numeric.");
            return false;
        }
        return true;
    }

    private void tablelord() {
        try {
            String sql = "SELECT `item_id` as 'Item ID', `item_name` as 'Item Name', `category` as 'Category', `serial_no` as 'Serial No.', `cost_price` as 'Cost Price', `sale_price` as 'Sale Price', `quantity` as 'Quantity', `min_stock` as 'MIN', `max_stock` as 'MAX', `image` as 'Image' FROM `productlist`";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            tbladditem.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));

            theader();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading table: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void cleardata() {
        autoid();
        txtname.setText("");
        cmbcategory.setSelectedIndex(0);
        txtserial.setText("");
        txtcost.setText("");
        txtselling.setText("");
        txtquantity.setText("");
        txtmin.setText("");
        txtmax.setText("");

    }

    private void getdata() {
        iid = txtid.getText();
        iname = txtname.getText();
        category = cmbcategory.getSelectedItem().toString();
        serialno = txtserial.getText();
        costprice = txtcost.getText();
        sellprice = txtselling.getText();
        quantity = txtquantity.getText();
        minimum = txtmin.getText();
        maximum = txtmax.getText();

    }

    private void autoid() {
        try {
            String sql = "SELECT `item_id` FROM `productlist` ORDER BY CAST(SUBSTRING(item_id, 3) AS UNSIGNED) DESC LIMIT 1";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();

            if (rs.next()) {
                String lastId = rs.getString("item_id");

                // Extract the numeric part of the ID
                String prefix = lastId.substring(0, 2);  // Assuming the prefix is always 'ID'
                int number = Integer.parseInt(lastId.substring(2));  // Numeric part of the ID
                number++; // Increment the number

                // Generate the new ID (no fixed digit length)
                String newId = prefix + number; // Combine prefix and incremented number
                txtid.setText(newId);

            } else {
                // If the database is empty, start from ID1
                txtid.setText("ID1");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel browse;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnclear;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnupdate;
    private javax.swing.JComboBox<String> cmbcategory;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblimage;
    private javax.swing.JTable tbladditem;
    private javax.swing.JTextField txtcost;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextField txtmax;
    private javax.swing.JTextField txtmin;
    private javax.swing.JTextField txtname;
    private javax.swing.JTextField txtquantity;
    private javax.swing.JTextField txtselling;
    private javax.swing.JTextField txtserial;
    // End of variables declaration//GEN-END:variables
}
